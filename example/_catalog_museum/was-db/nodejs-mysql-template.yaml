apiVersion: tmax.io/v1
kind: ClusterTemplate
metadata:
  name: nodejs-mysql-template
  namespace: default
  annotations:
    template-version: 1.2.2
    tested-operator-version: 4.1.3.2
imageUrl: https://i.imgur.com/ImDhuQF.png
provider: tmax
recommend: false
shortDescription: NodeJS & MySQL Template
longDescription: NodeJS & MySQL Template
urlDescription: https://nodejs.org/ko/
tags:
- was
- nodejs
- db
- mysql
plans:
- bindable: false
  description: nodejs-mysql
  name: nodejs-mysql-plan1
  schemas:
    service_instance:
      create:
        parameters:
          DB_STORAGE: 5Gi
          APP_NAME: mysql-deploy
          MYSQL_USER: root1
          MYSQL_PASSWORD: tmax@23
          MYSQL_DATABASE: root1
parameters:
- name: APP_NAME
  displayName: PipelineName
  description: Pipeline name
  required: true
- name: DB_STORAGE
  displayName: DBStorage
  description: Storage size for DB
  required: true
- name: MYSQL_USER
  displayName: MysqlUser
  description: MysqlUser
  required: true
- name: MYSQL_PASSWORD
  displayName: MysqlPassword
  description: MysqlPassword
  required: true
- name: MYSQL_DATABASE
  displayName: MysqlDatabase
  description: MysqlDatabase
  required: true
- name: GIT_URL
  displayName: GitURL
  description: Git Repo. URL
  required: true
- name: GIT_REV
  displayName: GitRev
  description: GitRevision
  required: true
- name: IMAGE_URL
  displayName: ImageURL
  description: Output Image URL
  required: true
- name: REGISTRY_SECRET_NAME
  displayName: RegistrySecret
  description: Secret for accessing image registry
  required: false
  value: ''
- name: SERVICE_ACCOUNT_NAME
  displayName: serviceAccountName
  description: Service Account Name
  required: true
- name: WAS_PORT
  displayName: wasPort
  description: WAS Port
  valueType: number
  required: true
- name: DB_SERVICE_TYPE
  displayName: DbServiceType
  description: DB Service Type (ClsuterIP/NodePort/LoadBalancer)
  required: true
- name: WAS_SERVICE_TYPE
  displayName: WasServiceType
  description: WAS Service Type (ClsuterIP/NodePort/LoadBalancer)
  required: true
- name: PACKAGE_SERVER_URL
  displayName: PackageServerUrl
  description: URL (including protocol, ip, port, and path) of private package server
    (e.g., devpi, pypi, verdaccio, ...)
  required: false
- name: DEPLOY_RESOURCE_CPU
  displayName: DeployResourceCpu
  description: Deployment resource (cpu)
  required: true
- name: DEPLOY_RESOURCE_MEM
  displayName: DeployResourceMem
  description: Deployment resource (mem)
  required: true
objects:
- apiVersion: v1
  kind: Service
  metadata:
    name: ${APP_NAME}-service
    labels:
      app: ${APP_NAME}
  spec:
    type: ${WAS_SERVICE_TYPE}
    ports:
    - port: ${WAS_PORT}
    selector:
      app: ${APP_NAME}
      tier: nodejs
- apiVersion: v1
  kind: Service
  metadata:
    name: ${APP_NAME}-db-service
    labels:
      app: ${APP_NAME}
  spec:
    type: ${DB_SERVICE_TYPE}
    ports:
    - port: 3306
    selector:
      app: ${APP_NAME}
      tier: mysql
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${APP_NAME}-db-pvc
    labels:
      app: ${APP_NAME}
  spec:
    storageClassName: csi-cephfs-sc
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${DB_STORAGE}
- apiVersion: v1
  kind: Secret
  metadata:
    name: ${APP_NAME}-secret
  type: Opaque
  stringData:
    MYSQL_USER: ${MYSQL_USER}
    MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    MYSQL_DATABASE: ${MYSQL_DATABASE}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: ${APP_NAME}-mysql
    labels:
      app: ${APP_NAME}
  spec:
    selector:
      matchLabels:
        app: ${APP_NAME}
        tier: mysql
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          app: ${APP_NAME}
          tier: mysql
      spec:
        initContainers:
        - name: init-privilege-${MYSQL_USER}
          image: busybox
          command:
          - sh
          - -c
          - echo 'mysql $mysql_flags -e "grant all privileges on *.* to ${MYSQL_USER}@'\''%'\''; flush privileges;"' >> /opt/app-root/src/mysql-init/privilege.sh
          volumeMounts:
          - name: mysql-init-cfg
            mountPath: /opt/app-root/src/mysql-init
        containers:
        - image: 192.168.6.110:5000/centos/mysql:5.7
          name: mysql
          env:
          - name: MYSQL_USER
            valueFrom:
              secretKeyRef:
                name: ${APP_NAME}-secret
                key: MYSQL_USER
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${APP_NAME}-secret
                key: MYSQL_PASSWORD
          - name: MYSQL_DATABASE
            valueFrom:
              secretKeyRef:
                name: ${APP_NAME}-secret
                key: MYSQL_DATABASE
          ports:
          - containerPort: 3306
            name: mysql
          volumeMounts:
          - name: mysql-persistent-storage
            mountPath: /var/lib/mysql/data
          - name: mysql-init-cfg
            mountPath: /opt/app-root/src/mysql-init
          readinessProbe:
            initialDelaySeconds: 5
            periodSeconds: 10
            exec:
              command:
              - /bin/bash
              - -c
              - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE
                -e 'SELECT 1'
        volumes:
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: ${APP_NAME}-db-pvc
        - name: mysql-init-cfg
          emptyDir: {}
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: ${APP_NAME}-deploy-cfg
  data:
    deploy-spec.yaml: |
      spec:
        selector:
          matchLabels:
            app: ${APP_NAME}
            tier: nodejs
        template:
          metadata:
            labels:
              app: ${APP_NAME}
              tier: nodejs
          spec:
            imagePullSecrets:
            - name: ${REGISTRY_SECRET_NAME}
            containers:
            - env:
              - name: DB_HOST
                value: ${APP_NAME}-db-service
              - name: DB_PORT
                value: "3306"
              - name: DB_USER
                valueFrom:
                  secretKeyRef:
                    name: ${APP_NAME}-secret
                    key: MYSQL_USER
              - name: DB_PW
                valueFrom:
                  secretKeyRef:
                    name: ${APP_NAME}-secret
                    key: MYSQL_PASSWORD
              - name: DB_NAME
                valueFrom:
                  secretKeyRef:
                    name: ${APP_NAME}-secret
                    key: MYSQL_DATABASE
              ports:
              - containerPort: ${WAS_PORT}
              resources:
                limits:
                  cpu: ${DEPLOY_RESOURCE_CPU}
                  memory: ${DEPLOY_RESOURCE_MEM}
- apiVersion: tekton.dev/v1alpha1
  kind: Pipeline
  metadata:
    name: ${APP_NAME}-pipeline
  spec:
    params:
    - name: app-name
      type: string
      description: Application name
    - name: deploy-cfg-name
      description: Configmap name for description
    - name: git-url
      description: Git url
    - name: git-rev
      description: Git revision
    workspaces:
      - name: git-source
        description: The git repo will be cloned onto the volume backing this workspace
    tasks:
    - name: git-clone
      taskRef:
        name: git-clone
        kind: ClusterTask
      workspaces:
        - name: output
          workspace: git-source
      params:
        - name: url
          value: $(params.git-url)
        - name: revision
          value: $(params.git-rev)
    - name: build-source
      taskRef:
        name: s2i
        kind: ClusterTask
      runAfter:
        - git-clone
      workspaces:
        - name: git-source
          workspace: git-source
      params:
      - name: BUILDER_IMAGE
        value: tmaxcloudck/s2i-nodejs:12
      - name: PACKAGE_SERVER_URL
        value: ${PACKAGE_SERVER_URL}
      - name: REGISTRY_SECRET_NAME
        value: ${REGISTRY_SECRET_NAME}
      - name: IMAGE_URL
        value: ${IMAGE_URL}
    - name: deploy
      taskRef:
        name: generate-and-deploy-using-kubectl
        kind: ClusterTask
      runAfter:
        - build-source
      params:
      - name: app-name
        value: $(params.app-name)
      - name: image-url
        value: $(tasks.build-source.results.image-url)
      - name: deploy-cfg-name
        value: $(params.deploy-cfg-name)
- apiVersion: tekton.dev/v1alpha1
  kind: PipelineRun
  metadata:
    name: ${APP_NAME}-run-first
  spec:
    serviceAccountName: ${SERVICE_ACCOUNT_NAME}
    pipelineRef:
      name: ${APP_NAME}-pipeline
    params:
    - name: app-name
      value: ${APP_NAME}
    - name: deploy-cfg-name
      value: ${APP_NAME}-deploy-cfg
    - name: git-url
      value: ${GIT_URL}
    - name: git-rev
      value: ${GIT_REV}
    workspaces:
      - name: git-source
        volumeClaimTemplate:
          spec:
            accessModes:
            - ReadWriteOnce
            storageClassName: csi-cephfs-sc
            resources:
              requests:
                storage: 500Mi
